import sys
import re
import os
from datetime import datetime

SCRIPT_NAME = 'cleanup-automated-subs.py'
DEBUG_MODE = False
# List of common 2-character words to avoid breaking them up across lines
NO_BREAK_WORDS = ['裏面', '嗰陣', '術師', '可以', '呢個', '真係', '唔係', '自己', '而家', '唔好', '我哋', '之後', '都係', '已經', '不過', '如果', '因為', '所以', '唔知', '就係', '好多', '覺得', '好似', '其實', '唔會', '應該', '點解', '見到', '公司', '屋企', '但係', '朋友', '知道', '今日', '時候', '唔到', '成日', '電話', '香港', '大家', '佢哋', '一定', '係咪', '可能', '問題', '阿爸', '有啲', '兩個', '喺度', '呢啲', '時間', '入面', '嗰個', '只係', '都好', '咁多', '阿媽', '唔使', '有冇', '開始', '一齊', '聽到', '乜嘢', '仲有', '鍾意', '我係', '之前', '係呀', '都會', '或者', '記得', '一樣', '其他', '佢嘅', '出嚟', '雖然', '畀我', '亦都', '即刻', '邊個', '突然', '今晚', '㗎嘞', '我嘅', '今次', '唔想', '呢度', '一次', '你哋', '一陣', '望住', '開心', '小姐', '你嘅', '一直', '第一', '睇下', '頭先', '有人', '快啲', '原來', '畀你', '就算', '做咩', '上面', '好好', '爸爸', '以為', '返嚟', '以前', '先生', '同埋', '嗰啲', '決定', '政府', '最後', '出去', '即係', '竟然', '地方', '跟住', '需要', '點知', '幾多', '唔識', '希望', '說話', '唔同', '點樣', '唔該', '終於', '一路', '而且', '多人', '完全', '發生', '個月', '然後', '做乜', '所有', '唔得', '不如', '一啲', '聽日', '女仔', '星期', '繼續', '一下', '意思', '畀人', '小小', '世界', '食飯', '係呢', '量詞', '當然', '女人', '啲人', '點呀', '男人', '機會', '感覺', '第二', '嚟㗎', '幾個', '慢慢', '醫生', '一句', '仲要', '啱啱', '你好', '離開', '根本', '梗係', '返工', '搞到', '一日', '定要', '定係', '一刻', '出現', '平時', '人哋', '好耐', '情況', '返去', '緊要', '咩呀', '等我', '同事', '講嘢', '小心', '你呢', '起身', '生活', '清楚', '先至', '準備', '當我', '落去', '唔多', '邊度', '就要', '本身', '任何', '相信', '打算', '成個', '辦法', '由於', '社會', '入去', '多謝', '做嘢', '非常', '嘅話', '所謂', '分鐘', '另一', '他人', '更加', '又係', '究竟', '細路', '醫院', '老婆', '工作', '身邊', '中國', '重要', '面前', '嚟嘅', '好呀', '反應', '個個', '電視', '有時', '生意', '之間', '學生', '個鐘', '關係', '吖嘛', '有錢', '發現', '唔敢', '幾時', '唔通', '唔夠', '唯有', '門口', '電腦', '特別', '阿哥', '擔心', '少少', '唔見', '出聲', '架車', '乜野', '係咩', '仲未', '㗎喇', '幾日', '個位', '為咗', '㗎嘛', '過去', '嗰度', '冇事', '得到', '結婚', '一邊', '解釋', '淨係', '原因', '上次', '日日', '一種', '同一', '兄弟', '之外', '之下', '明白', '以後', '即時', '仲係', '禮拜', '呢樣', '一早', '到底', '係噉', '噉就', '方面', '全部', '美國', '警察', '當時', '冇乜', '收到', '幾好', '唔理', '到時', '唔肯', '二十', '影響', '嚟講', '算係', '諗住', '大學', '成功', '最好', '比較', '會同', '睇到', '方法', '得閒', '一時', '多啲', '好想', '哎吔', '呢道', '老師', '叫做', '好意', '簡單', '噉樣', '不斷', '呢位', '努力', '成為', '老闆', '認為', '鐘意', '令到', '老公', '講到', '上去', '埋去', '見過', '依然', '周圍', '感情', '無論', '幫手', '經過', '大陸', '肯定', '能夠', '十幾', '譬如', '自然', '後生', '唔啱', '幾耐', '好啦', '面對', '辛苦', '只要', '有事', '三十', '一件', '認真', '要求', '睇住', '應承', '呢隻', '日本', '中意', '支持', '今年', '份人', '明明', '心情', '曾經', '十年', '細個', '幾年', '精神', '選擇', '陣間', '去咗', '介紹', '實係', '點都', '國家', '結果', '同時', '好講', '呢排', '有無', '樓下', '做得', '永遠', '大聲', '行為', '本來', '緊張', '拎住', '細佬', '㗎啦', '港人', '人生', '廁所', '間房', '總之', '發覺', '父母', '識得', '既然', '冇嘢', '代表', '每個', '每日', '而係', '舒服', '讀書', '做到', '一百', '基本', '絕對', '唔明', '大佬', '放心', '早餐', '甚至', '部份', '隔離', '計劃', '餐廳', '打開', '學校', '過嚟', '尋晚', '多次', '轉身', '冇得', '媽媽', '奇怪', '老細', '無人', '加上', '廣東', '發展', '電影', '反而', '酒店', '興趣', '另外', '禮物', '講話', '英文', '最近', '其中', '解決', '十五', '行埋', '巴士', '身上', '容易', '對住', '今朝', '得自', '正當', '記住', '一份', '咩嘢', '多年', '試過', '從來', '夜晚', '個頭', '得出', '一段', '將來', '旅行', '附近', '接受', '處理', '男仔', '可惜', '休息', '有得', '音樂', '意見', '好彩', '仆街', '照顧', '走去', '英國', '做人', '坐低', '呢次', '手上', '邊有', '通常', '太多', '老豆', '好冇', '之嘛', '同人', '搞掂', '消息', '好過', '直接', '留意', '經濟', '好少', '最多', '年前', '改變', '放工', '令人', '掛住', '眼前', '細聲', '乜都', '只有', '直到', '唔錯', '自從', '唔要', '轉頭', '大個', '外國', '要有', '實在', '作為', '考慮', '銀行', '死咗', '一點', '未必', '變咗', '地下', '安排', '老實', '做咗', '真正', '就嚟', '住喺', '麻煩', '都得', '係啦', '唔少', '負責', '普通', '各位', '尋日', '諗起', '試下', '日子', '答案', '我行', '落嚟', '至於', '始終', '科技', '對付', '得嘞', '比賽', '市場', '前面', '心機', '不知', '又要', '有心', '出街', '國人', '每次', '後面', '中學', '飛機', '相當', '懷疑', '再見', '嘅啫', '人工', '受到', '重有', '冇錯', '尷尬', '運動', '服務', '好心', '能力', '的士', '明顯', '細細', '家人', '關心', '行開', '剩係', '哈哈', '就真', '同學', '理由', '再加', '自由', '喇嘛', '出面', '報紙', '食完', '一聲', '招呼', '好奇', '仍然', '身體', '環境', '做過', '太太', '大叫', '垃圾', '首先', '方便', '幾十', '之際', '上前', '好人', '仲好', '事實', '正常', '點鐘', '兩句', '一步', '有機', '一向', '媽咪', '觀察', '除咗', '值得', '生仔', '經理', '十萬', '起碼', '功課', '責任', '對方', '最大', '一身', '唔畀', '依家', '例如', '天氣', '一般', '點算', '原諒', '開門', '眼神', '畢業', '一部', '半年', '表哥', '於是', '變成', '人家', '放棄', '網上', '相反', '考試', '鐘頭', '客氣', '表情', '好睇', '上嚟', '班人', '打比', '裏面', '多數', '表現', '撞到', '獨立', '早就', '得喇', '將會', '多個', '危險', '一千', '冇咁', '想要', '變得', '態度', '介意', '地鐵', '多時', '遲到', '死人', '壓力', '一世', '點做', '使乜', '分別', '之中', '個字', '人士', '想做', '咁啱', '提出', '入嚟', '一家', '好食', '十二', '離婚', '上個', '毒男', '歡迎', '阿婆', '立即', '專登', '故事', '老人', '一切', '對於', '後來', '感受', '目標', '家姐', '一張', '報警', '無理', '市民', '得返', '大部', '行動', '不停', '投資', '千祈', '朝早', '西裝', '驚訝', '當年', '實際', '家庭', '安全', '拍拖', '十分', '靚仔', '妹妹', '主動', '條女', '未有', '放低', '至得', '哥哥', '文化', '資料', '大話', '生日', '存在', '五十', '下次', '正正', '講真', '嚴重', '當中', '目的', '愛情', '仔女', '遇到', '眼淚', '飲茶', '正一', '冇用', '你先', '的確', '原本', '的話', '高層', '老爺', '少爺', '落雨', '一場', '隨便', '先係', '通知', '澳門', '傾計', '誤會', '中文', '警方', '政治', '次次', '暫時', '相機', '關於', '痴線', '阿嫂', '係喇', '百萬', '習慣', '等等', '大約', '拒絕', '走出', '認得', '左邊', '係都', '只會', '語言', '公園', '節目', '咖啡', '唔算', '幾次', '脾氣', '聽講', '做法', '無謂', '身份', '道理', '親戚', '奶奶', '旁邊', '點頭', '機場', '事業', '正式', '第三', '第日', '走上', '講下', '活動', '嘢食', '嘗試', '包括', '唔關', '再講', '意外', '想像', '隨時', '阻住', '認識', '留低', '外面', '直情', '不可', '有關', '做錯', '一套', '保護', '老母', '條件', '膊頭', '氣氛', '噚日', '話題', '國旗', '城市', '聲音', '求其', '寧願', '無端', '研究', '會用', '完成', '唔掂', '人類', '年紀', '三年', '期間', '同意', '前一', '先知', '方向', '捉住', '商量', '合作', '中心', '堅持', '民主', '銀包', '夠膽', '打到', '辭職', '對眼', '十一', '唯一', '參加', '食咗', '過程', '表達', '程度', '同樣', '時時', '道歉', '走啦', '走入', '十八', '秘密', '都不', '戶口', '一係', '酒吧', '舖頭', '保持', '幾百', '一面', '情緒', '分手', '一方', '整個', '打扮', '有趣', '一手', '過啲', '尊重', '常德', '教育', '歷史', '經常', '不得', '對手', '大概', '四十', '會講', '法律', '入到', '示意', '進行', '恐怖', '上網', '證明', '要好', '封信', '性格', '好話', '大哥', '小器', '報告', '有意', '出門', '半個', '婆婆', '早啲', '聯絡', '二日', '文字', '反對', '返學', '會議', '律師', '會話', '埋嚟', '經歷', '幾點', '欣賞', '意識', '大力', '控制', '一於', '偏偏', '你等', '再次', '珍妮', '新聞', '價值', '大廈', '上下', '一半', '失去', '屬於', '幾大', '肚餓', '文員', '初初', '出名', '食嘢', '立法', '兩年', '合理', '輕輕', '見面', '未來', '快樂', '一排', '樣樣', '早晨', '肥佬', '拉住', '蛋糕', '成績', '股票', '互相', '會上', '做好', '瞓覺', '國際', '本人', '了解', '少女', '無奈', '正話', '大小', '文章', '吸引', '以上', '現實', '主要', '位置', '一堆', '搞錯', '注意', '中間', '唔似', '睇過', '一口', '阿叔', '玩到', '阻止', '傳統', '形容', '失敗', '好得', '飲酒', '同大', '一番', '過份', '接近', '訊息', '開口', '熟悉', '我等', '晚飯', '確係', '契爺', '議員', '之一', '為人', '藝術', '幾乎', '認同', '工人', '會變', '最重', '距離', '做出', '樓梯', '笑容', '故意', '討論', '表示', '鎖匙', '幾咁', '收埋', '廣告', '請問', '幸福', '神經', '伙記', '利用', '忘記', '盡快', '露出', '身後', '粵語', '充滿', '意義', '太陽', '手指', '概念', '真心', '特登', '滿意', '行李', '大把', '興奮', '全無', '員工', '睇落', '內容', '一片', '殺人', '理解', '出世', '對面', '之類', '經驗', '左右', '去過', '睇睇', '自信', '分開', '算啦', '亂講', '叔叔', '姑娘', '大班', '呢處', '吩咐', '加繩', '入咗', '遊戲', '司機', '就快', '去飲', '一萬', '唔准', '有所', '好笑', '手袋', '利益', '一把', '上位', '利是', '多事', '咪係', '當日', '未婚', '猶豫', '嗰時', '講法', '年代', '小學', '識講', '事情', '好玩', '資格', '諗法', '空間', '接觸', '畫面', '失望', '老友', '應付', '眼光', '不安', '死都', '每年', '事件', '生命', '八十', '有用', '幾千', '師奶', '場面', '感到', '年青', '日見', '得罪', '沖涼', '飲杯', '放過', '抱住', '答應', '簡直', '頭髮', '唱歌', '做完', '有成', '我們', '手提', '升職', '未見', '下面', '禮貌', '中環', '支票', '心理', '廚房', '姊妹', '維持', '盡量', '無事', '微笑', '走向', '交通', '健康', '分析', '法會', '示威', '透過', '手術', '五百', '消失', '無可', '人大', '正經', '浪費', '衰仔', '想見', '邊處', '大人', '溝通', '家長', '發達', '落地', '琴晚', '出口', '原則', '下晝', '清潔', '小事', '高興', '必要', '喺處', '傻仔', '睇下', '手機', '似乎', '乾淨', '好嘢', '手段', '太過', '傷害', '人情', '可憐', '花園', '會打', '晏晝', '出賣', '出手', '丈夫', '信心', '指住', '表演', '文件', '系統', '制度', '方式', '差啲', '爭取', '港女', '刺激', '玻璃', '揸住', '無視', '傷心', '狀態', '聽見', '地址', '坐監', '揾錢', '幫助', '人物', '人人', '聖誕', '三日', '單車', '動作', '等到', '心諗', '心目', '私人', '時有', '歡喜', '若果', '廢話', '師父', '服侍', '拜拜', '設計', '移民', '現場', '不能', '首歌', '適合', '選舉', '複雜', '忽然', '角色', '人民', '足球', '根據', '願意', '必須', '單位', '好聽', '睇法', '細心', '我的', '反正', '行得', '背後', '真相', '會見', '十六', '無聊', '公共', '毫子', '後尾', '電梯', '開支', '阿妹', '聽晚', '後話', '出席', '大大', '公開', '被人', '聽過', '何人', '好返', '冇話', '出奇', '識到', '學習', '打工', '公眾', '旺角', '底下', '管理', '聰明', '思考', '自殺', '檢查', '唔切', '準時', '討厭', '晚晚', '困難', '係小', '一對', '破壞', '遲啲', '良心', '好在', '上車', '安慰', '去街', '畀錢', '未知', '情人', '勇氣', '冷靜', '屯門', '攬住', '語氣', '同天', '壞咗', '動物', '隔籬', '例子', '主角', '得意', '勤力', '酒樓', '之內', '恭喜', '一輪', '工廠', '相識', '一眼', '抑或', '加埋', '話之', '大門', '睇嚟', '台灣', '申請', '收入', '失業', '新年', '一分', '識做', '犧牲', '開會', '半夜', '一生', '投訴', '多少', '果然', '過得', '阿姐', '法庭', '好感', '嗰日', '護士', '噚晚', '好嘈', '回應', '落車', '走過', '財政', '筆錢', '咪住', '向左', '阿姨', '世伯', '大衛', '君子', '本地', '有咗', '明星', '食物', '加入', '放假', '調查', '路上', '用手', '婚禮', '睇戲', '無意', '個中', '不及', '火車', '得咗', '法官', '眼鏡', '印象', '地位', '改革', '網絡', '何況', '聽朝', '匿埋', '道德', '偷偷', '提醒', '號碼', '乜鬼', '靜靜', '收聲', '順便', '事幹', '打得', '剩返', '天下', '鄉下', '病人', '使用', '提供', '北京', '自動', '理想', '發出', '寫字', '點睇', '有條', '承認', '直頭', '一餐', '講笑', '公務', '網球', '想話', '地點', '避開', '婚姻', '感動', '威脅', '八婆', '五萬', '交代', '一行', '心急', '呢邊', '三代', '聞言', '空氣', '上堂', '商場', '學識', '一代', '污糟', '觀眾', '日出', '得多', '這個', '引起', '立場', '長大', '過大', '廣州', '馬路', '祝你', '埋單', '費事', '細妹', '明知', '對象', '對話', '心中', '相處', '說服', '打死', '在場', '等如', '姨媽', '收線', '寂寞', '入屋', '大量', '歌手', '時代', '本土', '游水', '買嘢', '分享', '六十', '足夠', '犀利', '叫人', '專心', '十九', '表面', '回憶', '職員', '二百', '大事', '因此', '重新', '醫療', '第時', '人面', '秩序', '宜家', '唔定', '事發', '右手', '坦白', '夫妻', '三萬', '有排', '古怪', '跟蹤', '問過', '總會', '因住', '小說', '理論', '男女', '標準', '睇見', '組織', '角度', '不是', '借錢', '揾工', '洗手', '眾人', '滿足', '梳化', '太大', '提起', '見得', '唔成', '無用', '順利', '成晚', '大都', '上床', '難受', '有份', '乖乖', '人權', '乜事', '走人', '向右', '就坐', '大件', '人口', '做事', '心態', '三次', '最高', '多好', '民族', '作出', '好正', '成長', '跳舞', '聽聞', '即管', '姐姐', '衝動', '果真', '順手', '為止', '日後', '未曾', '我人', '伯母', '大笑', '秋芹', '見狀', '總統', '超過', '無數', '成就', '成身', '紅色', '紀錄', '部門', '產生', '主人', '小時', '心臟', '三百', '阿明', '行路', '無一', '大鑊', '人身', '出事', '笑話', '一度', '學人', '保安', '世人', '親自', '巴閉', '在乎', '一蚊', '不屑', '埋位', '侮辱', '擰轉', '推開', '主席', '學家', '分之', '出入', '公仔', '生存', '保險', '少年', '要人', '階段', '出自', '集中', '計數', '打完', '舊年', '女性', '陌生', '左手', '口氣', '黑色', '好事', '嚇親', '低頭', '飲醉', '不禁', '響起', '橫掂', '打手', '用嚟', '得過', '文學', '產品', '特首', '作品', '阿爺', '身材', '變化', '至少', '好叻', '合格', '下下', '人心', '鼓勵', '形式', '五千', '犯法', '完美', '敵人', '傳媒', '幾歲', '交流', '大多', '阿伯', '玩具', '啤酒', '下手', '得了', '容許', '戒指', '話晒', '安樂', '早已', '主意', '預算', '咸濕', '換衫', '同班', '當晚', '邊位', '神情', '吖嗱', '通話', '部分', '等於', '蘋果', '在於', '多咗', '進步', '更多', '宣傳', '沒有', '出發', '痛苦', '之餘', '處於', '和平', '好貴', '同情', '發揮', '每晚', '限制', '玩完', '成年', '賺錢', '球場', '硬係', '類似', '公婆', '全家', '呼吸', '規矩', '請人', '範圍', '實有', '雙手', '人事', '等陣', '聯網', '後悔', '失禮', '倫敦', '難過', '逃避', '論盡', '什麼', '大波', '早排', '扮到', '私營', '衰嘢', '邊間', '作者', '科學', '好鬼', '萬人', '即使', '思想', '難得', '大隻', '入口', '不同', '雜誌', '下午', '會考', '攻擊', '如何', '兩樣', '由得', '除非', '自我', '九十', '粗口', '金融', '身家', '擁有', '層樓', '衝突', '食晏', '算好', '一類', '上身', '唔只', '單純', '視線', '反駁', '沉默', '輸咗', '工程', '教授', '遊客', '百分', '辦公', '參考', '資源', '少有', '謀殺', '衰人', '琴日', '唔順', '麻雀', '某啲', '珍惜', '夠鐘', '靚女', '班友', '以往', '門外', '盡力', '近排', '認錯', '事先', '唔止', '要點', '一一', '地上', '唔妥', '一筆', '鬼佬', '輕鬆', '做成', '面色', '爭執', '房門', '新抱', '友仔', '經紀', '左上', '金市', '社運', '夏天', '記者', '知識', '遊行', '九龍', '重點', '主義', '證據', '影相', '環保', '生果', '夢想', '製造', '政黨', '牛奶', '揾食', '成熟', '非禮', '開頭', '重未', '攞返', '雙眼', '變態', '心裏', '應酬', '保證', '好啊', '前途', '私家', '提議', '法院', '放手', '手下', '手續', '病房', '嗰便', '以嚟', '做功', '消防', '大雨', '以下', '校長', '演員', '起嚟', '退休', '只能', '有限', '行政', '暴力', '尤其', '法例', '價錢', '偉大', '三分', '增加', '進入', '專業', '口水', '競爭', '形象', '兩次', '公平', '於都', '後果', '車禍', '實行', '公廁', '教訓', '反抗', '信任', '互聯', '集會', '是但', '反問', '停車', '又試', '追問', '知會', '老麥', '妒忌', '就死', '溫書', '質素', '地區', '食煙', '不足', '水平', '往往', '訓練', '新鮮', '候選', '豐富', '暑假', '大堆', '踢波', '期望', '人為', '嗰樣', '千萬', '邀請', '雙方', '正確', '鬧交', '打交', '一啖', '幼稚', '合約', '發夢', '七十', '權利', '收工', '會死', '十三', '黃金', '九成', '轉變', '兩點', '為免', '經營', '預備', '騷擾', '激動', '輪到', '會會', '回答', '江湖', '判決', '返畀', '數碼', '攝影', '蘇蝦', '骨場', '攞嚟', '啤啤', '雪糕', '數字', '取消', '職業', '行街', '過多', '相對', '四圍', '發表', '食過', '追求', '有效', '幫襯', '晚會', '鋪頭', '好處', '言論', '假期', '二千', '機構', '無辜', '娛樂', '象徵', '單單', '飲嘢', '成世', '天真', '全身', '上樓', '還返', '唔愛', '顯得', '保障', '回覆', '憤怒', '敷衍', '搖頭', '想到', '一心', '聽住', '默默', '賤人', '冷冷', '陪住', '冷笑', '舉動', '姑姐', '打斷', '大漢', '阿德', '埋晒', '俾錢', '小明', '冠軍', '跌咗', '演唱', '資訊', '現代', '建築', '技術', '做大', '反映', '手法', '大戰', '得食', '錯誤', '人員', '建議', '用到', '判斷', '心思', '有鬼', '好用', '現金', '總係', '你的', '人性', '聽話', '大方', '味道', '付出', '生產', '二次', '遲早', '對待', '傾偈', '決心', '人頭', '樓上', '期待', '差人', '提到', '無心', '自私', '報仇', '金錢', '上門', '全力', '發洩', '嗰晚', '預計', '地出', '終審', '怒火', '依舊', '發呆', '聲線', '結論', '居然', '矛盾', '避免', '乜人', '老鼠', '傷口', '公室', '難以', '多多', '日天', '背景', '死亡', '專家', '一塊', '假設', '花生', '十四', '用電', '贊成', '地產', '平衡', '客人', '功夫', '免費', '打爛', '食藥', '穩定', '配合', '上司', '刻意', '幫忙', '三條', '好識', '愉快', '點點', '捨得', '幻想', '平靜', '到達', '急症', '生性', '嚇死', '救命', '性感', '出錢', '反擊', '畀返', '試探', '阿福', '重話', '錯愕', '近年', '翻譯', '疑犯', '顏色', '冷氣', '核突', '陽光', '宣佈', '紀念', '大眾', '好攰', '指示', '哲學', '鏡頭', '青年', '過人', '不滿', '食埋', '過後', '革命', '嘉賓', '頂住', '深圳', '追到', '冇心', '就噉', '萬一', '下人', '開飯', '青春', '心水', '古惑', '詳細', '先見', '就是', '內疚', '一毫', '途中', '死啦', '親人', '至好', '開車', '老嘢', '早起', '頭一', '專員', '一絲', '字典', '球員', '通過', '六合', '贏咗', '颱風', '導致', '政策', '無限', '日常', '如此', '將軍', '爛咗', '一味', '女神', '符合', '批評', '投票', '各自', '前後', '強調', '最佳', '少啲', '造成', '行人', '街上', '享受', '非法', '話事', '勉強', '慶祝', '法國', '挑戰', '論點', '力量', '一層', '沙灘', '白色', '多得', '到手', '警告', '本事', '個自', '耳仔', '周身', '忍住', '投入', '重大', '安心', '有權', '用力', '用盡', '熱情', '估計', '落力', '本法', '機票', '搞事', '打發', '藉口', '神秘', '直覺', '度住', '心頭', '親生', '腦海', '奈何', '一天', '在意', '坐下', '財神', '姨丈', '系好', '當住', '總有', '三千', '年年', '山頂', '實驗', '打機', '足以', '定義', '打劫', '之上', '想買', '人手', '落街', '身為', '一連', '麵包', '好勁', '過來', '總共', '這樣', '強烈', '邊啲', '內心', '開工', '上海', '過年', '聲稱', '眼中', '承諾', '心事', '晚餐', '心口', '交帶', '等人', '好惡', '剛剛', '老虎', '由頭', '鬼咁', '上市', '目光', '幾位', '回頭', '一打', '可愛', '唔制', '速度', '正面', '後門', '失控', '聲明', '遺憾', '所知', '情形', '婚事', '波子', '即可', '家嫂', '同德', '加一', '睇好', '孔子', '試吓', '不時', '人死', '事物', '地震', '推廣', '好飲', '球隊', '人數', '師傅', '十足', '最終', '受害', '未做', '居民', '結束', '圍住', '各種', '人命', '信用', '奶茶', '裝修', '顯示', '幾錢', '放學', '無情', '兇手', '高手', '劇情', '揸車', '企圖', '達到', '咁鬼', '稱呼', '出於', '有種', '代替', '秘書', '吹水', '飯食', '關鍵', '案件', '車牌', '恤衫', '啱先', '好受', '場合', '大意', '即將', '就住', '魷魚', '情願', '穩陣', '過頭', '有情', '大堂', '物體', '高級', '資產', '驚喜', '公事', '小偷', '人選', '大廳', '叫雞', '真真', '烏龍', '人渣', '同安', '安撫', '過問', '咪嘈', '契女', '早唞', '花樽', '書館', '保留', '作用', '地球', '差佬', '上年', '發明', '煮飯', '讀過', '全球', '當地', '主任', '無關', '皮膚', '寫到', '參與', '飲食', '中秋', '手尾', '新界', '有利', '終身', '混亂', '關注', '電子', '時刻', '街坊', '旨意', '算數', '妹仔', '直至', '好比', '長期', '到死', '呃人', '鄰居', '罪行', '勢力', '誠意', '日頭', '權力', '厲害', '收返', '落到', '手臂', '行業', '排隊', '損失', '天生', '工時', '助手', '上落', '問到', '無錢', '好問', '清醒', '立刻', '落樓', '掙扎', '別人', '感激', '講講', '長途', '真話', '好聲', '你我', '黑人', '美麗', '車場', '中左', '外母', '計畫', '部長', '公約', '金價', '吸血', '口語', '工具', '逐漸', '圖書', '子女', '豆腐', '德國', '擺明', '任務', '訪問', '成立', '睇書', '良好', '福利', '害人', '專門', '屎忽', '麻麻', '牛肉', '珍珠', '公民', '主觀', '夫婦', '跌落', '平安', '純粹', '外人', '整蠱', '不單', '中華', '毫無', '建立', '來自', '來往', '畫家', '受傷', '正義', '買賣', '通通', '講明', '賭錢', '發燒', '斯文', '角落', '地步', '食屎', '剩低', '兩邊', '醉酒', '賭場', '手勢', '好放', '荷包', '想出', '飲得', '一架', '巧合', '流露', '分數', '友善', '激死', '差館', '死死', '刑事', '完結', '天光', '請坐', '創業', '場所', '嘻嘻', '求婚', '透露', '撫養', '瞭解', '隨住', '接住', '秦國', '基礎', '響度', '亞洲', '話說', '平均', '措施', '深入', '同文', '旅遊', '共產', '我部', '買到', '日食', '博物', '人才', '汽水', '流行', '成千', '少數', '敏感', '掌握', '瘋狂', '正如', '車站', '機器', '嗌交', '規定', '白白', '不要', '公里', '條例', '會計', '增長', '補充', '大師', '見工', '一共', '創造', '戲院', '人群', '事後', '公路', '記憶', '化妝', '冇計', '水都', '不了', '慳返', '商業', '條命', '業務', '何必', '舊時', '到頭', '要由', '過電', '被迫', '頭痛', '眼見', '外表', '現在', '送禮', '做手', '巴西', '相比', '面目', '要面', '所為', '怕醜', '攞錢', '嗰位', '生人', '一起', '處境', '答覆', '打理', '自語', '老老', '友情', '面向', '郁手', '個半', '好客', '擋住', '合同', '至多', '頭皮', '吓吓', '做小', '嘅唧', '入得', '得以', '想死', '更何', '黑布', '阿大', '叫停', '點對', '一旁', '實話', '大姑', '表叔', '要嚟', '到任', '急急', '語文', '母語', '數學', '耶穌', '乘客', '皇帝', '一篇', '題目', '官員', '冬天', '評論', '爆炸', '上升', '比起', '英雄', '年輕', '結構', '街頭', '成份', '多大', '爺爺', '小人', '包裝', '課程', '雀仔', '武器', '歐洲', '三角', '為主', '合法', '背脊', '真實', '喜歡', '火燭', '諗返', '漫畫', '導演', '承受', '政權', '每人', '向前', '嗰次', '四周', '生出', '創意', '好死', '地圖', '少錢', '落得', '傳說', '動力', '下去', '難怪', '凌晨', '回收', '放鬆', '會理', '針對', '恐懼', '基於', '得知', '一頭', '開聲', '跳樓', '多餘', '樂觀', '大膽', '出啲', '有禮', '親友', '面紅', '會面', '聽眾', '番工', '男性', '最快', '名譽', '開到', '就正', '當眾', '誠懇', '隨手', '心底', '質問', '親密', '抵死', '外賣', '跑過', '代理', '埋頭', '交到', '火機', '解下', '無幾', '渡假', '老表', '得切', '偷嘢', '漢字', '改善', '效果', '植物', '減肥', '港大', '個陣', '功能', '作家', '行山', '樓價', '料到', '創作', '必然', '自細', '平日', '世事', '超級', '不論', '熱鬧', '特色', '意志', '生物', '必定', '學期', '打麻', '大過', '現象', '創新', '甜品', '睇怕', '犯罪', '下半', '成人', '樣衰', '有病', '把握', '數人', '受過', '現出', '積極', '第四', '要事', '物件', '同行', '確實', '月尾', '重係', '風險', '提早', '提高', '醒目', '加油', '藥水', '啱好', '意料', '引導', '大半', '契弟', '不利', '事務', '歧視', '放入', '扶住', '嫲嫲', '手頭', '還錢', '整體', '週末', '懲罰', '宵夜', '好運', '二世', '一眾', '出院', '主權', '唯獨', '四千', '辦事', '地獄', '蝕底', '會報', '全場', '阿頭', '輪椅', '糾纏', '崩潰', '晚上', '計埋', '遠處', '折磨', '往事', '廢柴', '心痛', '單身', '死地', '醒起', '趕到', '叫聲', '剛才', '官司', '得戚', '狠狠', '私下', '畜牲', '哥仔', '知名', '表妹', '接到', '餐館', '阿堯', '嘈醒', '古代', '常見', '股市', '上台', '可見', '戰爭', '地盤', '阿仔', '普遍', '仔細', '雞蛋', '演講', '紛紛', '因素', '好味', '龍門', '經典', '時期', '以外', '街市', '減少', '開放', '觀點', '次序', '上天', '大型', '向上', '舉行', '好強', '失戀', '鑽石', '落手', '大細', '籃球', '執行', '鋼琴', '輕易', '禁止', '隧道', '須要', '停留', '開張', '交易', '夾硬', '分明', '恥笑', '也不', '精彩', '主題', '中途', '真的', '更好', '完整', '無聲', '再用', '否認', '過癮', '四次', '白痴', '登記', '聚會', '剛好', '整整', '好激', '用心', '入門', '細節', '觀念', '天河', '程式', '回歸', '推動', '情景', '屌你', '平常', '便宜', '證實', '經已', '名叫', '黐線', '親眼', '睇死', '送到', '快手', '微微', '去死', '樣子', '偵探', '頭暈', '睇波', '心靈', '陸續', '中午', '開燈', '誇張', '自覺', '剎那', '異樣', '單打', '修理', '晚黑', '為乜', '用錢', '顛覆', '阿三', '叫醒', '小妹', '開開', '阿貓', '做女', '收音', '嚟自', '阿水', '論文', '實踐', '老竇', '海邊', '加強', '一致', '牌子', '說明', '常識', '客觀', '間中', '描述', '一帶', '層次', '友好', '不會', '理念', '演出', '消費', '共同', '他們', '規則', '假如', '重複', '委員', '天空', '照住', '不出', '病咗', '公佈', '虛偽', '不幸', '相似', '一舉', '義工', '鬧人', '加班', '取得', '累積', '嚴格', '發言', '童年', '臨時', '天花', '資金', '似樣', '出糧', '多位', '光明', '人間', '整理', '協助', '徹底', '傾向', '體力', '心意', '沉重', '收得', '形勢', '電器', '貢獻', '夾埋', '年齡', '狗屎', '傷風', '閒話', '女子', '儀式', '收皮', '現有', '少見', '戀愛', '重視', '浪漫', '紙巾', '國民', '重重', '未定', '千金', '東西', '實情', '做多', '麻甩', '一事', '八九', '求救', '步行', '地道', '照樣', '面子', '七月', '煩惱', '工業', '後日', '自問', '事頭', '拎走', '當初', '約會', '思維', '地面', '走開', '長輩', '望見', '搖搖', '觀塘', '中年', '貴姓', '溫柔', '快趣', '爛鬼', '實現', '遇上', '衝出', '入手', '運輸', '打量', '耐煩', '情報', '好閒', '開房', '心想', '膠袋', '尊嚴', '跑到', '拉到', '看更', '把柄', '復仇', '盈利', '撚化', '即是', '到即', '坐車', '單刀', '生女', '實用', '古人', '豬肉', '軍隊', '鉛筆', '不堪', '沙士', '教學', '出版', '太空', '海洋', '否則', '世紀', '感冒', '是非', '形成', '各有', '群眾', '項目', '選民', '打仗', '士多', '推出', '意味', '名人', '不嬲', '新人', '以至', '提升', '爆發', '成本', '如今', '其餘', '同屋', '恐怕', '理學', '中共', '計較', '補習', '風光', '冇禮', '上好', '衝入', '一批', '逃走', '家用', '轉彎', '未到', '學好', '公義', '抗爭', '食晒', '運作', '尋找', '錄音', '計算', '邋遢', '參選', '心得', '察覺', '買樓', '名牌', '父子', '拜年', '交換', '好日', '人格', '好撚', '常人', '耐性', '聞到', '吉利', '鴛鴦', '慢行', '有點', '澳洲', '灣仔', '整齊', '嚴肅', '弟弟', '事關', '街邊', '銀紙', '效率', '足足', '光頭', '安靜', '上進', '留言', '念頭', '皇后', '打打', '二來', '玫瑰', '補償', '撞鬼', '拜託', '無言', '亦即', '打出', '神色', '重心', '約定', '法子', '鬼馬', '大計', '嘈住', '窮鬼', '好氣', '戇居', '區旗', '問起', '暗示', '杯葛', '心知', '舊水', '拳頭', '黑面', '餐室', '電報', '裏便', '正打', '靈丹', '床邊', '前夫', '弊嘞', '停手', '冇機', '痛腳', '測驗', '語法', '旅客', '模型', '粒鐘', '可謂', '與其', '破產', '流傳', '以來', '文人', '白話', '穿咗', '八卦', '現時', '入場', '可否', '打擊', '分子', '動機', '內地', '開啲', '辭咗', '取代', '材料', '國有', '碼頭', '當做', '最新', '反思', '未免', '聯合', '要不', '家族', '好抵', '甚麼', '大會', '艱難', '討好', '充足', '可靠', '護照', '學到', '出身', '打破', '參觀', '壞人', '一夜', '死不', '路邊', '對白', '冇啲', '男子', '書局', '三更', '基金', '升到', '人相', '曼聯', '上流', '不在', '智慧', '預期', '陰影', '手腳', '片段', '肥仔', '長遠', '目前', '失蹤', '宴會', '流血', '適當', '搬屋', '傳聞', '友誼', '同上']

######################################## HELPER FUNCTIONS ########################################
def resub(text, pattern, repl):
    """Helper function to perform regex substitution."""
    
    if DEBUG_MODE:
        print(f"Substituting '{pattern}' with '{repl}' in text: {text}")
    
    return re.sub(pattern, repl, text)

def resub(text, regex_list):
    """Helper function to perform multiple regex substitutions."""
    
    for pattern, repl in regex_list:
        text = re.sub(pattern, repl, text)
    
    return text

def is_non_chinese(char):
    return re.match(r'[A-Za-z\d]', char)

####################################### PROCESS SUBTITLES #######################################
def clean_subtitle_universal_char_replacements(text):
    regex_list = [
        ('爲', '為'),
        ('搵', '揾'),
        ('溫', '温'),
        ('㨂', '揀'),
        ('說', '説'),
        ('脫', '脱'),
        ('稅', '税'),
        ('閱', '閲'),
        ('床', '牀'),
        ('羣', '群'),
        ('裡', '裏'),
        ('麵', '麪'),
        ('敎', '教'),
        ('祕', '秘'),
        ('巿', '市'),
        ('衆', '眾'),
        ('濕', '濕'),
        ('鷄', '雞'),
        ('吿', '告'),
        ('汙', '污'),
        ('洩', '泄'),
        ('駡', '罵'),
        ('銹', '鏽'),
        ('鉤', '鈎'),
        ('衛', '衞'),
        ('蔥', '葱'),
        ('艷', '豔'),
        ('葯', '藥'),
        ('滙', '匯'),
        ('啟', '啓'),
        ('奬', '獎'),
        ('俾', '畀'),
        ('我地', '我哋'),
        ('你地', '你哋'),
        ('佢地', '佢哋'),
        ('人地', '人哋'),
        ('妳', '你'),
        ('您', '你'),        
        ('癐', '攰')
    ]
    return resub(text, regex_list)

def clean_subtitle_preaa3aa4(text):
    regex_list = [
        (r'\?', '？'),
        (r'\.\.\.', '…'),
        ('… ', '…'),
        (r'(?<![，。！!?.;？；…])係咪(?=[呀啊吖？])', '，係咪') # add comma to tag question 係咪
    ]

    return resub(text, regex_list)

def clean_subtitle_aa3aa4(text):
    # Smart replacement of 呀 → 啊
    lines = text.split('\n')
    regex_patterns = [r'([\u4e00-\u9fff])唔\1']
    literal_question_words = ['做乜', '係咪', '未', '有冇', '好冇', '邊', '咩', '邊個', '點解', '幾耐', '幾時', '邊度', '點', '點樣', '幾多', '乜嘢']

    new_lines = []

    for line in lines:
        if '呀' in line:
            should_replace = False
            if line.endswith('？'):
                # Check regex patterns
                if any(re.search(pat, line) for pat in regex_patterns):
                    should_replace = True
                # Check plain string patterns
                elif any(word in line for word in literal_question_words):
                    should_replace = True

            else:
                should_replace = True  # not a question → replace

            if should_replace:
                line = line.replace('呀', '啊')

        if '啫' in line:
            should_replace = False
            if line.endswith('？'):
                # Check regex patterns
                if any(re.search(pat, line) for pat in regex_patterns):
                    should_replace = True
                # Check plain string patterns
                elif any(word in line for word in literal_question_words):
                    should_replace = True

            else:
                should_replace = True  # not a question → replace

            if should_replace:
                line = line.replace('啫', '唧')

        new_lines.append(line)

    text = '\n'.join(new_lines)

    return text

def clean_subtitle_punctuation(text):
    # Basic fixes to commas and periods, removing exclamation marks
    text = re.sub(r'[。.]$', '', text)
    text = re.sub(r'[。.]', '，', text)
    text = re.sub(r'!', '', text)
    text = re.sub(r',', '，', text)
    text = re.sub(r'^，', '', text) # delete comma at start of line
    
    # delete spaces when not next to Latin characters
    text = re.sub(r'(?<![a-zA-Z])\s+(?![a-zA-Z])', '', text) 
    
    # Final particle related changes
    text = re.sub(r'㗎㗎', '㗎', text)
    text = re.sub(r'嘅？', '𠸏？', text)

    # Add a comma after final particles
    text = re.sub(r'啊(?![？\n！，…啊呀吖喇啦喎啝噃咩吒咋喳啫唧嘛嗱呢𠻹添㖭嗎嘛囉囖咯])', '啊，', text)
    text = re.sub(r'喎(?![？\n！，…啊呀吖喇啦喎啝噃咩吒咋喳啫唧嘛嗱呢𠻹添㖭嗎嘛囉囖咯])', '喎，', text)
    text = re.sub(r'喇(?![？\n！，…啊呀吖喇啦喎啝噃咩吒咋喳啫唧嘛嗱呢𠻹添㖭嗎嘛囉囖咯])', '喇，', text)
    text = re.sub(r'啦(?![？\n！，…啊呀吖喇啦喎啝噃咩吒咋喳啫唧嘛嗱呢𠻹添㖭嗎嘛囉囖咯])', '啦，', text)
    text = re.sub(r'㗎(?![？\n！，…啊呀吖喇啦喎啝噃咩吒咋喳啫唧嘛嗱呢𠻹添㖭嗎嘛囉囖咯])', '㗎，', text)
    text = re.sub(r'咋(?![？\n！，…啊呀吖喇啦喎啝噃咩吒咋喳啫唧嘛嗱呢𠻹添㖭嗎嘛囉囖咯])', '咋，', text)
    text = re.sub(r'噃(?![？\n！，…啊呀吖喇啦喎啝噃咩吒咋喳啫唧嘛嗱呢𠻹添㖭嗎嘛囉囖咯])', '噃，', text)
    text = re.sub(r'嘛(?![？\n！，…啊呀吖喇啦喎啝噃咩吒咋喳啫唧嘛嗱呢𠻹添㖭嗎嘛囉囖咯])', '嘛，', text)
    text = re.sub(r'嗎(?![？\n！，…啊呀吖喇啦喎啝噃咩吒咋喳啫唧嘛嗱呢𠻹添㖭嗎嘛囉囖咯])', '嗎，', text)
    
    # Add a comma before or after certain words    
    text = re.sub(r'(?<![？！，])(?<!^)(?<![之])但係(?![，！？$])', r'，但係', text, flags=re.MULTILINE)
    text = re.sub(r'(?<![？！，])(?<!^)(?<![之只])不過(?![，！？$])', r'，不過', text, flags=re.MULTILINE)
    text = re.sub(r'(?<![？！，])(?<!^)雖然(?![，！？$])', r'，雖然', text, flags=re.MULTILINE)
    text = re.sub(r'(?<![？！，哋噉])(?<!^)首先(?![，！？$])', r'，首先', text, flags=re.MULTILINE) #I think this will probably get a fair amount of false positives 
    text = re.sub(r'(?<![？！，])(?<!^)嘅話(?![，！？$])', r'嘅話，', text, flags=re.MULTILINE)
    
    #remove trailing
    text = re.sub(r'^啊…', '', text)

    # Remove commas around 就係 
    text = re.sub('就，係，', '就係', text)
    text = re.sub('就係，', '就係', text)

    return text

def clean_subtitle_misc(text):
    # Misc changes for conventions
    regex_list_misc = [
        (r'咁(?![多耐濟滯細大靚高簡廣厚短瘦長少痛遲慘啱快難美遠容犀重脆硬蠢嚴奇荒熟遙弱辛平粗清慢心矮叻臭嘈])', '噉'),
        (r'噉([\u4e00-\u9fff][\u4e00-\u9fff])嘅', r'咁\1嘅'),
        (r'噉(認真|緊張|困難|容易)', r'咁\1'), # change to 咁 before specific 2-char adjectives
        (r'([冇幾])噉', r'\1咁'),
        (r'(?<![譯原])著(?![述名])', '着'),
        (r'[哂曬]', '晒'),
        (r'(?<![曝沖])晒(?=[招馬衫命乾張蓆])', '曬'),
        (r'晒(?=太陽|水艇|雨淋|月光|相舖)', '曬'),
        (r'(?<=[睇諗試求])吓', '下'),
        ('只不過', '之不過'),
        (r'之不過(?!，)', '之不過，'),
        (r'[姐唧啫]係', '即係'),
        (r'[依宜]家', '而家'),
        ('爹地', '爹哋'),
        (r'(?<![空])翻(?![身閲轉譯])', '返'),
        ('無錯', '冇錯'),
        ('無事', '冇事'),
        ('無人', '冇人'),
        ('無見', '冇見'),
        ('無嘢', '冇嘢'),
        ('無問題', '冇問題'),
        ('無能力', '冇能力'),
        ('無辦法', '冇辦法'),
        ('無可能', '冇可能'),
        ('無所謂', '冇所謂'),
        ('無任務', '冇任何'),
        ('無幾耐', '冇幾耐'),
        ('無其他', '冇其他'),
        ('有無', '有冇'),
        ('根本無', '根本冇'),
        ('有沒有', '有冇'),
        ('差不多', '差唔多'),
        ('果陣', '嗰陣'),
        ('果啲', '嗰啲'),
        ('閉喇', '弊喇'),
        ('小鳥', '雀仔'),
        ('鳥仔', '雀仔'),
        ('睡覺', '瞓覺'),
        ('明日', '聽日'),
        ('很好', '好好'),
        ('不要', '唔好'),
        ('這樣', '噉樣'),
        ('好不好', '好唔好'),
        ('好了', '好啦'),
        ('看來', '睇嚟'),
        ('些', '啲'),
        ('昨日', '噚日'),
        ('就是', '就係'),
        ('睡咗', '瞓咗'),
        ('躲埋', '匿埋'),
        ('好累', '好攰'),
        (r'黎$', '嚟'),
        (r'黎([？！，…\n])', r'嚟\1'),
        (r'黎([\u4e00-\u9fff][？！，…\n])', r'嚟\1'),
        (r'^難道', '唔通')
    ]
    
    # Fix Misc Cantonese errors
    regex_list_cantonese_errors = [
        ('喺到', '喺度'),
        ('呢到', '呢度'),
        ('嗰到', '嗰度'),
        (r'([係答])岩', r'\1啱'),
        ('講得岩', '講得啱'),
        ('係呢邊', '喺呢邊'),
        ('係呢度', '喺呢度'),
        ('係呢個時候', '喺呢個時候'),
        ('係嗰個時候', '喺嗰個時候'),
        (r'係([^，？$]*?)前', r'喺\1前'),
        ('喺好耐之前嘅', '係好耐之前嘅'),
        ('喺喺', '係喺'),
        ('喺邊到', '喺邊度'),
        ('幾好嗎', '你好嗎'),
        (r'壞[咗喇啦]', '弊喇'),
        ('冷靜點', '冷靜啲'),
        ('無得', '冇得'),
        ('水果', '生果'),
        ('蒼蠅', '烏蠅'),
        ('碰', '掂'),
        ('比心', '畀心'),
        ('舊鐘', '夠鐘'),
        ('一舊', '一嚿'),
        ('啪啪', '噼噼'),
        ('唔洗', '唔使'),
        ('洗乜', '使乜'),
        ('任工', '陰功'),
        ('好無？', '好唔好？'),
        ('隔嚟', '隔籬'),
        ('隔離', '隔籬'),
        ('哎喲', '哎吔'),
        ('快乜', '廢物'),
        ('癌石', '岩石'),
        ('拔命', '搏命'),
        ('得濟', '得滯'),
        ('好餓', '好肚餓'),
        ('除然', '雖然'),
        ('算熟', '算數'),
        ('雪掃', '算數'),
        ('敢啱', '咁啱'),
        ('假馬', '咁啱'),
        ('睇黎', '睇嚟'),
        ('出黎', '出嚟'),
        ('快點', '快啲'),
        ('舊嘢', '嚿嘢'),
        (r'其樂|奇訥', '奇喇'),
        (r'果(?=[一二三四五六七八九十白千萬])', '過'), # likely refers to passing of X amount of time
        ('無啲', '冇啲'),
        ('乜野', '乜嘢'),
        ('等我比', '等我畀'),
        ('割到', '嗰度'),
        ('糟透', '早唞'),
        ('晚晚咩', '慢慢嚟'),
        (r'[洗駛]人唔使本', '使人唔使本'),
        ('亂噉', '亂咁'),
        ('唔好練噉', '唔好亂咁'),
        (r'([咁噉])趕', r'\1講'),
        ('唔好吓氣', '唔好客氣'),
        ('唔使吓氣', '唔使客氣'),
        (r'[份分訓]唔着', '瞓唔着'),
        ('細哥', '細個'),
        ('扣晒你', '靠晒你'),
        (r'^通，', '唔通，'),
        ('咩都無', '咩都冇'),
        (r'^埋住', '咪住'),
        (r'^如過', '如果'),
        (r'瞓([得到])好臨', r'瞓\1好稔'),
        ('晚啲', '晏啲'),
        (r'唔[濟齋]啊', '唔制啊'),
        (r'唔[濟齋]$', '唔制'),
        ('食你一啖', '錫你一啖'),
        (r'[洗駛]唔使', '使唔使'),
        ('洗費', '使費'),
        ('你來', '你嚟'),
        ('撲街', '仆街'),
        ('撲你個街', '仆你個街')
    ]
    
    text = resub(text, regex_list_misc)
    return resub(text, regex_list_cantonese_errors)

def clean_subtitle_particles(text):
    # Replace some final particles to get closer to conventions
    regex_list_particles = [
        (r'(?<!衫書十頭招衣帽李咪相棚房高)架(?=[，？…喇啦喎咯囉囖啫])', r'㗎'), # 架 to 㗎 avoiding 架-nouns
        (r'添$', '𠻹'),
        (r'添，', '𠻹，'),
        (r'添(?=[噃啵喎啊呀㗎架])', '𠻹'),
        (r'好嘛', '好嗎'),
        (r'[啫之姐咋]嘛', '吒嘛'),
        ('㗎嘛', '𠺢嘛'),
        ('唉啊', '哎吔'),
        ('哎啊', '哎吔'),
        (r'(?:啊){2,}', '啊'),
        ('啊啊', '啊'),
        ('哎吔啊', '哎吔'),
        ('冇事啊？', '冇事吖嘛？'),
        (r'冇([嘢事])吖嘛(?!？)', r'冇\1吖嘛？'),
        ('唔係啊嘛？', '唔係𠻺嗎？'),
        ('唔係啊嘛', '唔係𠻺嗎？'),
        ('好啊嘛', '好吖嘛'),
        ('好吖嘛，', '好吖嘛？'),
        ('啊嘛？', '𠻺嗎？'),
        ('呀嘛', '𠻺嗎'),
        ('啊嘛', '吖嘛'),
        ('真係啊', '真係吖'),
        ('話你知啊', '話你知吖'),
        ('話時話啊', '話時話吖'),
        ('老實講啊', '老實講吖'),
        ('都唔錯啊', '都唔錯吖'),
        ('真係唔錯啊', '真係唔錯吖'),
        (r'^畀你啊', '畀你吖'),
        (r'^求下你啊', '求下你吖'),
        (r'(?<=[^睇諗試求])下？', '吓？'),
        (r'不如([^，？$]*?)啊', r'不如\1吖'),
        (r'幫我([^，？$]*?)啊', r'幫我\1吖'),        
        ('啊下', '啊吓'),
        ('囉', '囖'),
        ('囖喎', '喇喎'),
        ('㗎啫', '㗎咋'),
        ('嘅咋', '㗎咋'),
        ('㗎嗎', '㗎咩'),
        ('嘅吓', '㗎嗬'),
        ('啦', '喇'),
        ('喇嘛', '啦嘛'),
        (r'(?<!太)好喇', '好啦'),
        ('就啦', '就喇'),
        ('啲喇', '啲啦'),
        ('下喇', '下啦'),
        (r'^嚟喇', '嚟啦'),
        (r'(?<=[，！？])嚟喇', '嚟啦'),
        (r'算數[喇囖]', '算數啦'),
        (r'梗係([^，？$]*?)喇', r'梗係\1啦'),
        (r'當然([^，？$]*?)喇', r'當然\1啦'),
        (r'反正([^，？$]*?)喇', r'反正\1啦'),
        (r'希望([^，？$]*?)喇', r'希望\1啦'),
        (r'隨便([^，？$]*?)喇', r'隨便\1啦'),
        (r'點都([^，？$]*?)喇', r'點都\1啦'),
        (r'唔使([^，？$]*?)喇', r'唔使\1啦'),
        (r'(?<!係)咪([^，？$]*?)喇', r'咪\1啦'),
        (r'唔係([\u4e00-\u9fff])喇', r'咪\1啦'),
        (r'唔好([^，？$]*?)喇', r'唔好\1啦'),
        (r'去([^，？到$]*?)喇', r'去\1啦'),
        ('行喇', '行啦'),
        (r'一於([^，？$]*?)喇', r'一於\1啦'),
        (r'不如([^，？$]*?)喇', r'不如\1啦'),
        (r'不如([^，？$]*?)囖', r'不如\1咯'),
        (r'等我([^，？$]*?)喇', r'等我\1啦'),
        (r'畀我([^，？$]*?)喇', r'畀我\1啦'),
        (r'我叫([^，？$]*?)喇', r'我叫\1啦'),
        (r'你叫([^，？$]*?)喇', r'你叫\1啦'),
        (r'佢叫([^，？$]*?)喇', r'佢叫\1啦'),
        (r'快啲([^，？$]*?)喇', r'快啲\1啦'),
        (r'都係([^，？$]*?)喇', r'都係\1啦'),
        (r'請([^，？$]*?)喇', r'請\1啦'),
        (r'唔怪得([^，？$]*?)喇', r'唔怪得\1啦'),
        (r'唔怪之([^，？$]*?)喇', r'唔怪之\1啦'),
        (r'都已經([^，？$]*?)喇', r'都已經\1啦'),
        (r'冇所謂([^，？$]*?)喇', r'冇所謂\1啦'),
        ('點就點喇', '點就點啦'),
        ('你信我喇', '你信我啦'),
        ('住佢喇', '住佢啦'),
        ('梗喇', '梗啦'),
        ('算喇', '算啦'),
        ('啲喇', '啲啦'),
        (r'^([睇見])喇，', r'\1啦，'),
        ('㗎囖', '㗎啦'),
        (r'^係囖', '係喇'),
        ('住囖', '住啦'),
        ('隨你囖', '隨你啦'),
        ('好嘞', '好啦'),
        (r'^噉嘅$', '噉𠸏？'), # isolated 噉嘅 become questions
        (r'係噉樣啊(?=，|$)', '係噉樣呀？'),
        (r'係噉啊(?=，|$)', '係噉呀？'),
        ('又係嘅', '又係𠸏'),
        ('咩原來', '乜原來'),
        (r'(?<!係)乜([^，？$]*?)啊', r'乜\1呀'),
        (r'原來([^，？$]*?)㗎', r'原來\1嘎'),
        ('喇？', '嗱？'),
        (r'即係(.*?)啫', r'只係\1啫'),
        ('呀呢', '啊哩'),
        (r'啊，你$', '啊哩？'),
        ('啦喎', '喇喎'), # fix overcorrection with 啦 replacements
        ('喂喇', '弊喇'),
        ('係咩啊', '係咪啊'),
        (r'喇，可$', '喇嗬'),
        (r'喇，可？$', '喇嗬？'),
        (r'^咩，原來', '乜原來'),
        (r'^啊？$', '吓？'),
        (r'唔([係會])掛', r'唔\1啩'),
        ('噉就係喇', '噉咪係囖'),
        (r'^就係喇', '咪係囖'),
        ('吓先', '下先'),
        (r'^咪係咩$', '乜係咩'),
        ('無喇喇', '無啦啦'),
        ('無啦啦，', '無啦啦'),
        (r'[巴吧][喇啦]，', '罷啦')
    ]
    return resub(text, regex_list_particles)

def clean_subtitle_custom_standards(text):
    # Delete certain noise/grunts
    regex_list_noise = [
        ('嘘，', ''),
        ('天啊，', ''),
        ('，啊，', '，'),
        (r'^[喇啊]，', ''),
        (r'[嘩嚿]啊', ''),
        (r'^嘩$', ''),
        (r'^吓$', ''),
        (r'^吓？$', ''),
        ('唉，', ''),
        ('哎，', ''),
        (r'哈$', ''),
        (r'(嘻){2,}', ''),
        (r'(唔){2,}', ''),
        (r'^唔$', ''),
        (r'^唔，', ''),
        (r'(嗯){2,}', ''),
        (r'(嗯){2,}', ''),
        (r'(咦){2,}', ''),
        (r'咦[…？]', ''),
        (r'(呼){2,}', ''),
        (r'呼[…]', '')
    ]
    # Fix double punctuation
    regex_list_punctuation = [
        ('，，', '，'),
        ('？，', '？')
    ]
    # Fix repeated speech
    regex_list_repeated = [
        (r'([\u4e00-\u9fff]+[，…])\1+', r'\1…'),     # 快啲啦快啲啦，  -> 快啲啦…
        (r'([\u4e00-\u9fff]{2,})[，…]\1+', r'\1…'),  # 快啲啦，快啲啦，-> 快啲啦…
        (r'([\u4e00-\u9fff]{2})\1+', r'\1…'),        # 大佬大佬大佬   -> 大佬…
        (r'([\u4e00-\u9fff])\1{2,}', r'\1…'),        # 喂喂喂         -> 喂…
        (r'([\u4e00-\u9fff]啊，)\1{2,}', r'\1…'),    # 停啊，停啊，    -> 停啊…
        (r'([\u4e00-\u9fff]㗎，)\1{2,}', r'\1…'),    # 靜㗎，靜㗎，    -> 靜㗎…
        ('，…', '…'),
        ('…，', '…'),
        ('……', '…'),
        (r'((我…|你…|佢…|唔…)){2,}', r'\1'),
        (r'((，我|，你|，佢)){2,}', r'\1…'),
        (r'^我，我', '我…我'),
        (r'^你，你', '你…你'),
        (r'^佢，佢', '佢…佢'),
        (r'[嗯唔哦啊]…', '')
    ]
    text = resub(text, regex_list_noise)
    text = resub(text, regex_list_punctuation)
    text = resub(text, regex_list_repeated)
    return text

def clean_subtitle_merge_tiny_and_huge_lines(text):
    lines = text.splitlines()
    result = []
    skip_next = False

    for i in range(len(lines)):
        if skip_next:
            skip_next = False
            continue

        current = lines[i].strip()

        if i + 1 < len(lines):
            next_line = lines[i + 1].strip()

            if (len(current) <= 5 and len(next_line) >= 16):
                result.append(f"{current}，{next_line}")
                skip_next = True
                continue
            elif (len(current) >= 16 and len(next_line) <= 5):
                result.append(f"{current}，{next_line}")
                skip_next = True
                continue

        result.append(current)

    return '\n'.join(result)

def clean_subtitle_enforce_line_break(text, line_break_length=10, line_max_length=21):
    if '\n' in text or len(text) <= line_max_length:
        return text  # Skip if already broken or too short

    def would_split_word(text, index, words_to_avoid):
        for word in words_to_avoid:
            if index > 0 and text[index - 1:index + 1] == word:
                return True
            if index + 1 < len(text) and text[index:index + 2] == word:
                return True
        return False
    
    def line_break_helper(text, line_break_length):
        if not would_split_word(text, line_break_length, NO_BREAK_WORDS):
            return text[:line_break_length] + '\n' + text[line_break_length:]
        else:
            # try to break after word ends
            for i in range(line_break_length + 1, len(text)):
                if not would_split_word(text, i, NO_BREAK_WORDS):
                    return text[:i] + '\n' + text[i:]
        return text  # give up if nowhere safe

    if is_non_chinese(text[line_break_length - 1]) and is_non_chinese(text[line_break_length]):
        # Start at line_break_length, look for first suitable non-latin char and non-breaking position
        i = line_break_length

        while i < len(text):
            if not is_non_chinese(text[i]) and not would_split_word(text, i, NO_BREAK_WORDS):
                return text[:i] + '\n' + text[i:]
            i += 1

        # fallback to breaking at line_break_length if safe
        return line_break_helper(text, line_break_length)
    else:
        return line_break_helper(text, line_break_length)
        
def clean_subtitle_revert_uncommon_conventions(text):
    regex_list = [
        ('噉', '咁'),
        ('𠸏', '嘅'),
        ('啊', '呀'),
        ('[咯囖]', '囉'),
        ('𠻺嗎', '呀嘛'),
        ('𠻹', '添'),
        ('嗬', '可'),
        ('吒嘛', '咋嘛'),
        ('𠺢嘛', '㗎嘛'),
        ('唧', '啫'),
        ('哎吔', '哎呀'),
        ('之不過', '只不過')
        ]

    return resub(text, regex_list)

# Clean up a single text subtitle entry and return it
def clean_subtitle(text):
    # Handle English better
    text = re.sub(r'﹑', '\'', text) # restore normal apostrophe
    text = re.sub(r'([a-zA-Z])-([a-zA-Z])', r'\1\2', text) # remove random hyphens
    text = re.sub(r'([a-zA-Z])\n([a-zA-Z])', r'\1\2', text) # remove linebreaks in the middle of latin text
    
    text = clean_subtitle_universal_char_replacements(text)
    text = clean_subtitle_preaa3aa4(text)
    text = clean_subtitle_aa3aa4(text)
    text = clean_subtitle_punctuation(text)
    text = clean_subtitle_misc(text)
    text = clean_subtitle_particles(text)
    text = clean_subtitle_custom_standards(text)

    # Step 2: Remove newline before ≤6 characters at END of subtitle
    text = re.sub(r'\n([^\n]{1,6})$', r'\1', text)

    # Step 3: Merge lines where second line starts with 1-2 characters followed by a Chinese comma
    text = re.sub(r'\n([^\n]{1,2}，)', r'\1', text)

    # Step 4: Insert newline after the fullwidth comma or ellipsis closest to the center
    if '\n' not in text and len(text) >= 20:
        if '，' in text:
            # Break at the comma closest to the center
            comma_indices = [m.start() for m in re.finditer('，', text)]
            center = len(text) // 2
            closest_index = min(comma_indices, key=lambda i: abs(i - center))
            text = text[:closest_index + 1] + '\n' + text[closest_index + 1:]
        elif '…' in text:
            # Break at the ellipsis closest to the center
            ellipsis_indices = [m.start() for m in re.finditer('…', text)]
            center = len(text) // 2
            closest_index = min(ellipsis_indices, key=lambda i: abs(i - center))
            text = text[:closest_index + 1] + '\n' + text[closest_index + 1:]

    # Step 5: Move 1–6 characters after a fullwidth comma to the next line,
    # but only if the first line is longer than or equal to the second
    def move_after_comma_conditional(match):
        part1 = match.group(1)
        part2 = match.group(2)

        # Get line before the match
        prefix = text[:match.start()]
        lines_before = prefix.split('\n')
        prev_line = lines_before[-1] if lines_before else ''

        if len(prev_line) >= len(part2):
            return f'，\n{part1}{part2}'
        else:
            return match.group(0)  # No change

    text = re.sub(
        r'，([^\n]{1,6})\n([^\n]+)',
        move_after_comma_conditional,
        text
    )

    # Step 6: Remove trailing fullwidth commas
    text = re.sub(r'，$', '', text)
    text = re.sub(r'，(?=\n)', '', text) 

    # Smart replacement of 呀 → 啊 again which is necessary after line fixes to catch ones that were missed
    text = clean_subtitle_aa3aa4(text)
    
    text = clean_subtitle_merge_tiny_and_huge_lines(text)
    return clean_subtitle_enforce_line_break(text)






# Fix subtitles that incorrectly broken across 2 different subtitles
def adjust_subtitle_breaks(output_file):
    OMIT_CHARS = {"噉", "喂", "噢", "嗯", "哦"}

    def parse_timestamp(ts):
        return datetime.strptime(ts, "%H:%M:%S,%f")

    def ms_diff(t1, t2):
        return (t2 - t1).total_seconds() * 1000

    with open(output_file, 'r', encoding='utf-8') as f:
        subtitles = f.read().strip().split('\n\n')

    processed_subs = []
    for i in range(len(subtitles)):
        block = subtitles[i].split('\n')
        if len(block) < 3:
            processed_subs.append('\n'.join(block))
            continue

        index, timestamp, *text = block
        if i > 0 and text:
            prev_block = processed_subs[-1].split('\n')
            prev_index, prev_timestamp, *prev_text = prev_block
            current_first_line = text[0]

            match = re.match(r'^([^\x00-\x7F])，', current_first_line)
            if match:
                char = match.group(1)
                prev_end = parse_timestamp(prev_timestamp.split(' --> ')[1])
                curr_start = parse_timestamp(timestamp.split(' --> ')[0])
                delta_ms = ms_diff(prev_end, curr_start)

                if delta_ms < 801 and char not in OMIT_CHARS:
                    prev_block[-1] += char
                    text[0] = text[0][len(char) + 1:]
                    processed_subs[-1] = '\n'.join([prev_index, prev_timestamp] + prev_block[2:])

        processed_subs.append('\n'.join([index, timestamp] + text))

    with open(output_file, 'w', encoding='utf-8') as f:
        f.write('\n\n'.join(processed_subs))



######################################### SRT PARSING ##########################################

# Quit the script
def quit():
    #os.system("pause")
    sys.exit(1)

# Takes an .srt file and returns an iterable list of (timecode, raw subtitle text)
def srt_to_list(input_path):
    with open(input_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # Split into blocks
    blocks = re.split(r'\n\s*\n', content.strip())
    subtitle_list = []

    for block in blocks:
        lines = block.splitlines()
        if len(lines) >= 3:
            # Ignore header index, we will renumber anyway
            block_timecode = lines[1]
            block_text = '\n'.join(lines[2:])
            subtitle_list.append((block_timecode, block_text))
        else:
            # Optional: skip malformed/short blocks entirely
            continue
    
    return subtitle_list

# Takes an iterable list of (timecode, subtitle text) and writes it to a file in .srt format
def list_to_srt(subtitle_list, output_path):
    blocks = []
    i = 1

    for timecode, text in subtitle_list:
        blocks.append(f'{i}\n{timecode}\n{text}')
        i += 1
    
    # Join blocks with blank lines
    cleaned_content = '\n\n'.join(blocks)
    
    with open(output_path, 'w', encoding='utf-8') as f:
        f.write(cleaned_content)

# Take a list of (timecode, subtitle text), clean up all the text, and return it
def clean_subtitle_list(subtitle_list):
    new_subtitle_list = []

    for timecode, text in subtitle_list:
        block_cleaned_text = clean_subtitle(text).strip()
        
        if DEBUG_MODE:
            print(f"Timecode: {timecode} converted text: {text} → {block_cleaned_text}")

        # Skip block if cleaned text is empty
        if not block_cleaned_text:
            continue
        
        # new_subtitle_list.append((timecode, '\n'.join([block_cleaned_text])))
        new_subtitle_list.append((timecode, block_cleaned_text))

    return new_subtitle_list

# Clean up subtitles in an input SRT file, then output with a prefix added on the filename
def process_file(input_file, output_prefix):
    try:
        # Derive the output file name
        output_file = f"{output_prefix}{os.path.basename(input_file)}"
        
        subtitle_list = srt_to_list(input_file)
        print("Got the input file srt list. Cleaning...")

        subtitle_list = clean_subtitle_list(subtitle_list)
        print("Cleaned subtitles from the list. Outputting to file...")

        list_to_srt(subtitle_list, output_file)
        print(f"Initial cleaning complete. Processed SRT saved to {output_file}.")

        adjust_subtitle_breaks(output_file)
        print(f"Final adjustments performed. Final SRT saved to {output_file}")

    except Exception as e:
        print(f"Error cleaning SRT file {input_file}: {e}")
        quit()

# Run process_file on all the SRT files in a directory
def process_directory(input_directory, output_prefix):
    try:
        # List all .srt files in the directory
        srt_files = [f for f in os.listdir(input_directory) if f.endswith('.srt')]

        if not srt_files:
            print(f"No .srt files found in directory: {input_directory}")
            return

        # Process each file
        for srt_file in srt_files:
            full_path = os.path.join(input_directory, srt_file)
            process_file(full_path, output_prefix)

    except Exception as e:
        print(f"An error occurred while processing the directory: {e}")

    return

def print_usage():
    print(f"Usage: python {SCRIPT_NAME} [<input_file> | -d <input_directory>] [-p <output_prefix>] [--debug]")
    return

######################################## MAIN SECTION #########################################

output_prefix = "wsp_"  # Default prefix added to the output filename

# Check if there are arguments 
if len(sys.argv) < 2:
    print("Error: No arguments provided. Please add arguments to the command (eg. test.py <filename>)")
    print_usage()
    quit()

# Enable debug mode if --debug flag is present
if "--debug" in sys.argv:
    DEBUG_MODE = True

# -p argument for output file name prefix
if "-p" in sys.argv:
    prefix_index = sys.argv.index("-p")
    if prefix_index + 1 < len(sys.argv):
        output_prefix = sys.argv[prefix_index + 1]
    else:
        print("Error: Missing value for -p argument.")
        print_usage()
        quit()

# Sanitize and validate input paths
def validate_path(path):
    if not os.path.exists(path):
        print(f"Error: The path '{path}' does not exist.")
        quit()
    return os.path.abspath(path)

# -d argument for directory of input SRT files
if sys.argv[1] == "-d":
    if len(sys.argv) < 3:
        print_usage()
        quit()
    input_directory = validate_path(sys.argv[2])
    process_directory(input_directory, output_prefix)
else:
    input_file = validate_path(sys.argv[1])
    process_file(input_file, output_prefix)